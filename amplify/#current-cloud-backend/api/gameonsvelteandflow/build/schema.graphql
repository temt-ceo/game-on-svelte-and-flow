type GameServerProcess {
  id: ID!
  type: String!
  message: String!
  playerId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Subscription {
  onCreateByPlayerid(playerId: String!): GameServerProcess @aws_subscribe(mutations: ["createGameServerProcess"])
  onCreateGameServerProcess(filter: ModelSubscriptionGameServerProcessFilterInput): GameServerProcess @aws_subscribe(mutations: ["createGameServerProcess"])
  onUpdateGameServerProcess(filter: ModelSubscriptionGameServerProcessFilterInput): GameServerProcess @aws_subscribe(mutations: ["updateGameServerProcess"])
  onDeleteGameServerProcess(filter: ModelSubscriptionGameServerProcessFilterInput): GameServerProcess @aws_subscribe(mutations: ["deleteGameServerProcess"])
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelGameServerProcessConnection {
  items: [GameServerProcess]!
  nextToken: String
}

input ModelGameServerProcessFilterInput {
  id: ModelIDInput
  type: ModelStringInput
  message: ModelStringInput
  playerId: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelGameServerProcessFilterInput]
  or: [ModelGameServerProcessFilterInput]
  not: ModelGameServerProcessFilterInput
}

type Query {
  getGameServerProcess(id: ID!): GameServerProcess
  listGameServerProcesses(filter: ModelGameServerProcessFilterInput, limit: Int, nextToken: String): ModelGameServerProcessConnection
}

input ModelGameServerProcessConditionInput {
  type: ModelStringInput
  message: ModelStringInput
  playerId: ModelStringInput
  and: [ModelGameServerProcessConditionInput]
  or: [ModelGameServerProcessConditionInput]
  not: ModelGameServerProcessConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateGameServerProcessInput {
  id: ID
  type: String!
  message: String!
  playerId: String!
}

input UpdateGameServerProcessInput {
  id: ID!
  type: String
  message: String
  playerId: String
}

input DeleteGameServerProcessInput {
  id: ID!
}

type Mutation {
  createGameServerProcess(input: CreateGameServerProcessInput!, condition: ModelGameServerProcessConditionInput): GameServerProcess
  updateGameServerProcess(input: UpdateGameServerProcessInput!, condition: ModelGameServerProcessConditionInput): GameServerProcess
  deleteGameServerProcess(input: DeleteGameServerProcessInput!, condition: ModelGameServerProcessConditionInput): GameServerProcess
}

input ModelSubscriptionGameServerProcessFilterInput {
  id: ModelSubscriptionIDInput
  type: ModelSubscriptionStringInput
  message: ModelSubscriptionStringInput
  playerId: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionGameServerProcessFilterInput]
  or: [ModelSubscriptionGameServerProcessFilterInput]
}
